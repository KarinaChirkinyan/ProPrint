import PyPDF2
import telebot
from telebot import types
import config
from datetime import date
import os
import pandas as pd
import openpyxl
import requests
from pathlib import Path
from PyPDF2 import PdfReader

import sys
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler


bot = telebot.TeleBot(config.Token)
max_kol = 250  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ª–æ—Ç–∫–µ
kol_str = max_kol  # —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ª–æ—Ç–∫–µ
subscribe = []

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üîî –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    markup.add(btn1)
    bot.send_message(message.chat.id,
                     text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ ProPrint", reply_markup=markup)


@bot.message_handler(content_types=['text'])
def func(message):
    global kol_str, max_kol, subscribe

    if (message.text == "üîî –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"):
        subscribe.append(message)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –±—É–º–∞–≥–∏")
        btn2 = types.KeyboardButton("–†–µ—Å—É—Ä—Å—ã")
        btn3 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id,
                         text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.", reply_markup=markup)

    elif (message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –±—É–º–∞–≥–∏"):
        bot.send_message(message.chat.id, text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ –ø—Ä–∏–Ω—Ç–µ—Ä–µ: {kol_str}")

    elif (message.text == "–†–µ—Å—É—Ä—Å—ã"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ó–∞–ø–æ–ª–Ω–∏–ª –ª–æ—Ç–æ–∫ –¥–ª—è –±—É–º–∞–≥–∏")
        btn2 = types.KeyboardButton("–ó–∞–º–µ–Ω–∏–ª –∫–∞—Ä—Ç—Ä–∏–¥–∂")
        btn3 = types.KeyboardButton("–û—Ç—á–µ—Ç")
        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, btn3, back)
        bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)

    elif (message.text == "–ó–∞–ø–æ–ª–Ω–∏–ª –ª–æ—Ç–æ–∫ –¥–ª—è –±—É–º–∞–≥–∏"):
        kol_str = max_kol
        bot.send_message(message.chat.id, text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ –ø—Ä–∏–Ω—Ç–µ—Ä–µ: {kol_str}")

    elif (message.text == "–ó–∞–º–µ–Ω–∏–ª –∫–∞—Ä—Ç—Ä–∏–¥–∂"):
        current_date = date.today()
        wb = openpyxl.load_workbook("–û—Ç—á–µ—Ç.xlsx")
        sheet = wb.active
        sheet.append((current_date, "–ó–∞–º–µ–Ω–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞"))
        wb.save("–û—Ç—á–µ—Ç.xlsx")
        bot.send_message(message.chat.id, text=f"{current_date}: –ó–∞–º–µ–Ω–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞")

    elif (message.text == "–û—Ç—á–µ—Ç"):
        f = open("–û—Ç—á–µ—Ç.xlsx", "rb")
        bot.send_document(message.chat.id, f)

    elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –±—É–º–∞–≥–∏")
        btn2 = types.KeyboardButton("–†–µ—Å—É—Ä—Å—ã")
        btn3 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)

    elif (message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
        bot.send_message(message.chat.id, text="–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @realsamvel")

    elif (message.text == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"):
        bot.send_message(message.chat.id, text=f"–û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –±—É–º–∞–≥–∏! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –≤ –ø—Ä–∏–Ω—Ç–µ—Ä–µ: {kol_str}")


class EventHandler(FileSystemEventHandler):
    # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    def on_created(self, event):
        global kol_str, max_kol, subscribe
        file = event.src_path
        reader = PdfReader(file)
        kol_str -= len(reader.pages)

        if kol_str <= int(max_kol * 0.15):
            for i in subscribe:
                i.text = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                func(i)

    """
    # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    def on_modified(self, event):
        print(event.event_type, event.src_path)

    # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    def on_deleted(self, event):
        print(event.event_type, event.src_path)

    # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è\–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    def on_moved(self, event):
        print(event.event_type, event.src_path, event.dest_path)
    """

if __name__ == "__main__":
    path = r"...\ProPrintFiles"  # –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    event_handler = EventHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive=True)
    observer.start()
    try:
        while True:
            bot.polling(none_stop=True)
            time.sleep(0.1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()
